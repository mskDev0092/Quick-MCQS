<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>GlassQuiz - Premium MCQ Testing Platform</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <style>
        :root {
            --primary-bg: rgba(255, 255, 255, 0.1);
            --secondary-bg: rgba(255, 255, 255, 0.05);
            --border-color: rgba(255, 255, 255, 0.2);
            --text-primary: #ffffff;
            --text-secondary: rgba(255, 255, 255, 0.7);
            --accent-color: #6366f1;
            --success-color: #10b981;
            --error-color: #ef4444;
            --warning-color: #f59e0b;
            --gradient-1: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            --gradient-2: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
            --gradient-3: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
            --shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
            --backdrop: blur(20px);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: var(--gradient-1);
            min-height: 100vh;
            color: var(--text-primary);
            line-height: 1.6;
            overflow-x: hidden;
        }

        body::before {
            content: '';
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: 
                radial-gradient(circle at 20% 80%, rgba(120, 119, 198, 0.3) 0%, transparent 50%),
                radial-gradient(circle at 80% 20%, rgba(255, 119, 198, 0.3) 0%, transparent 50%),
                radial-gradient(circle at 40% 40%, rgba(120, 219, 255, 0.2) 0%, transparent 50%);
            z-index: -1;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem;
        }

        .glass-card {
            background: var(--primary-bg);
            backdrop-filter: var(--backdrop);
            -webkit-backdrop-filter: var(--backdrop);
            border-radius: 20px;
            border: 1px solid var(--border-color);
            box-shadow: var(--shadow);
            transition: all 0.3s ease;
        }

        .glass-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 12px 40px 0 rgba(31, 38, 135, 0.5);
        }

        .header {
            text-align: center;
            margin-bottom: 3rem;
            animation: fadeInDown 0.8s ease;
        }

        .header h1 {
            font-size: 3rem;
            font-weight: 700;
            background: linear-gradient(135deg, #ffffff, #a78bfa);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            margin-bottom: 0.5rem;
        }

        .header p {
            font-size: 1.2rem;
            color: var(--text-secondary);
        }

        .main-content {
            display: grid;
            grid-template-columns: 1fr;
            gap: 2rem;
            animation: fadeIn 1s ease;
        }

        .upload-section {
            padding: 3rem;
            text-align: center;
        }

        .upload-area {
            border: 2px dashed var(--border-color);
            border-radius: 15px;
            padding: 3rem;
            margin: 2rem 0;
            transition: all 0.3s ease;
            cursor: pointer;
        }

        .upload-area:hover {
            border-color: var(--accent-color);
            background: rgba(99, 102, 241, 0.1);
        }

        .upload-area.dragover {
            border-color: var(--success-color);
            background: rgba(16, 185, 129, 0.1);
        }

        .upload-icon {
            font-size: 3rem;
            color: var(--accent-color);
            margin-bottom: 1rem;
        }

        .upload-text {
            font-size: 1.2rem;
            color: var(--text-secondary);
            margin-bottom: 1rem;
        }

        .upload-input {
            display: none;
        }

        .btn {
            background: rgba(255, 255, 255, 0.1);
            border: 1px solid var(--border-color);
            color: var(--text-primary);
            padding: 0.8rem 2rem;
            border-radius: 50px;
            font-size: 1rem;
            cursor: pointer;
            transition: all 0.3s ease;
            backdrop-filter: var(--backdrop);
            -webkit-backdrop-filter: var(--backdrop);
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
        }

        .btn:hover {
            background: rgba(255, 255, 255, 0.2);
            transform: translateY(-2px);
            box-shadow: 0 5px 20px rgba(0, 0, 0, 0.2);
        }

        .btn.primary {
            background: var(--gradient-3);
            border: none;
            box-shadow: 0 4px 15px rgba(79, 172, 254, 0.4);
        }

        .btn.primary:hover {
            box-shadow: 0 8px 25px rgba(79, 172, 254, 0.6);
        }

        .quiz-section {
            display: none;
            animation: fadeInUp 0.5s ease;
        }

        .quiz-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
            padding: 1.5rem;
            background: var(--secondary-bg);
            border-radius: 15px;
        }

        .quiz-progress {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .progress-bar {
            width: 200px;
            height: 8px;
            background: var(--secondary-bg);
            border-radius: 4px;
            overflow: hidden;
        }

        .progress-fill {
            height: 100%;
            background: var(--gradient-3);
            transition: width 0.3s ease;
            width: 0%;
        }

        .question-card {
            padding: 2.5rem;
            margin-bottom: 2rem;
        }

        .question-number {
            font-size: 0.9rem;
            color: var(--text-secondary);
            margin-bottom: 1rem;
        }

        .question-text {
            font-size: 1.3rem;
            margin-bottom: 2rem;
            line-height: 1.8;
        }

        .options-container {
            display: grid;
            gap: 1rem;
        }

        .option {
            padding: 1.2rem;
            background: var(--secondary-bg);
            border: 1px solid var(--border-color);
            border-radius: 12px;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .option:hover {
            background: rgba(255, 255, 255, 0.1);
            transform: translateX(5px);
        }

        .option.selected {
            background: rgba(99, 102, 241, 0.2);
            border-color: var(--accent-color);
        }

        .option.correct {
            background: rgba(16, 185, 129, 0.2);
            border-color: var(--success-color);
        }

        .option.incorrect {
            background: rgba(239, 68, 68, 0.2);
            border-color: var(--error-color);
        }

        .option input[type="radio"] {
            display: none;
        }

        .option-label {
            width: 24px;
            height: 24px;
            border: 2px solid var(--border-color);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s ease;
        }

        .option.selected .option-label {
            background: var(--accent-color);
            border-color: var(--accent-color);
        }

        .option.selected .option-label::after {
            content: 'âœ“';
            color: white;
            font-size: 14px;
        }

        .quiz-actions {
            display: flex;
            justify-content: space-between;
            margin-top: 2rem;
        }

        .results-section {
            display: none;
            text-align: center;
            animation: fadeIn 0.5s ease;
        }

        .results-header {
            margin-bottom: 2rem;
        }

        .score-circle {
            width: 150px;
            height: 150px;
            margin: 2rem auto;
            position: relative;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .score-ring {
            width: 100%;
            height: 100%;
            border-radius: 50%;
            background: conic-gradient(var(--success-color) 0deg, var(--success-color) var(--score-deg), var(--secondary-bg) var(--score-deg));
            display: flex;
            align-items: center;
            justify-content: center;
            position: relative;
        }

        .score-inner {
            width: 130px;
            height: 130px;
            background: var(--primary-bg);
            border-radius: 50%;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            backdrop-filter: var(--backdrop);
        }

        .score-text {
            font-size: 2rem;
            font-weight: 700;
            color: var(--success-color);
        }

        .score-label {
            font-size: 0.9rem;
            color: var(--text-secondary);
        }

        .results-summary {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1.5rem;
            margin: 2rem 0;
        }

        .summary-card {
            padding: 1.5rem;
            text-align: center;
        }

        .summary-icon {
            font-size: 2rem;
            margin-bottom: 0.5rem;
        }

        .summary-value {
            font-size: 1.5rem;
            font-weight: 700;
            margin-bottom: 0.25rem;
        }

        .summary-label {
            color: var(--text-secondary);
            font-size: 0.9rem;
        }

        .review-section {
            margin-top: 2rem;
            text-align: left;
        }

        .review-item {
            padding: 1.5rem;
            margin-bottom: 1rem;
            border-radius: 12px;
            background: var(--secondary-bg);
        }

        .review-question {
            font-weight: 600;
            margin-bottom: 0.5rem;
        }

        .review-answer {
            color: var(--text-secondary);
            font-size: 0.9rem;
        }

        .review-correct {
            color: var(--success-color);
        }

        .review-incorrect {
            color: var(--error-color);
        }

        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        @keyframes fadeInDown {
            from {
                opacity: 0;
                transform: translateY(-30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        @keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.05); }
            100% { transform: scale(1); }
        }

        .hidden {
            display: none !important;
        }

        .toast {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 1rem 2rem;
            background: var(--primary-bg);
            border: 1px solid var(--border-color);
            border-radius: 10px;
            backdrop-filter: var(--backdrop);
            box-shadow: var(--shadow);
            z-index: 1000;
            transform: translateX(100%);
            transition: transform 0.3s ease;
        }

        .toast.show {
            transform: translateX(0);
        }

        @media (max-width: 768px) {
            .container {
                padding: 1rem;
            }

            .header h1 {
                font-size: 2rem;
            }

            .upload-section,
            .question-card {
                padding: 1.5rem;
            }

            .quiz-header {
                flex-direction: column;
                gap: 1rem;
                text-align: center;
            }

            .progress-bar {
                width: 100%;
                max-width: 200px;
            }

            .quiz-actions {
                flex-direction: column;
                gap: 1rem;
            }

            .results-summary {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <header class="header">
            <h1><i class="fas fa-brain"></i> GlassQuiz</h1>
            <p>Modern MCQ Testing Platform with Premium Glassmorphism Design</p>
        </header>

        <main class="main-content">
            <!-- Upload Section -->
            <section id="uploadSection" class="glass-card upload-section">
                <h2>Upload Your MCQs</h2>
                <p>Upload a text file with your MCQs in plain English format</p>
                
                <div class="upload-area" onclick="document.getElementById('fileInput').click()">
                    <div class="upload-icon">
                        <i class="fas fa-cloud-upload-alt"></i>
                    </div>
                    <div class="upload-text">
                        Drag & drop your file here or click to browse
                    </div>
                    <div class="upload-hint">
                        Format: Question|OptionA|OptionB|OptionC|OptionD|CorrectOption
                    </div>
                </div>
                
                <input type="file" id="fileInput" class="upload-input" accept=".txt">
                
                <button class="btn primary" onclick="parseQuestions()">
                    <i class="fas fa-play"></i> Start Quiz
                </button>
                
                <div id="sampleFormat" style="margin-top: 2rem; padding: 1rem; background: var(--secondary-bg); border-radius: 10px;">
                    <h4>Sample Format:</h4>
                    <pre style="text-align: left; margin-top: 0.5rem; font-size: 0.9rem; color: var(--text-secondary);">
What is the capital of France?|London|Paris|Berlin|Madrid|B
Which planet is known as the Red Planet?|Venus|Mars|Jupiter|Saturn|B
                    </pre>
                </div>
            </section>

            <!-- Quiz Section -->
            <section id="quizSection" class="quiz-section">
                <div class="quiz-header glass-card">
                    <div class="quiz-title">
                        <h2><i class="fas fa-question-circle"></i> Quiz in Progress</h2>
                    </div>
                    <div class="quiz-progress">
                        <span id="questionCounter">Question 1 of 10</span>
                        <div class="progress-bar">
                            <div class="progress-fill" id="progressFill"></div>
                        </div>
                        <span id="timeElapsed">00:00</span>
                    </div>
                </div>

                <div id="questionContainer">
                    <!-- Questions will be dynamically inserted here -->
                </div>

                <div class="quiz-actions">
                    <button class="btn" id="prevBtn" onclick="previousQuestion()" disabled>
                        <i class="fas fa-chevron-left"></i> Previous
                    </button>
                    <button class="btn" id="flagBtn" onclick="flagQuestion()">
                        <i class="fas fa-flag"></i> Flag
                    </button>
                    <button class="btn primary" id="nextBtn" onclick="nextQuestion()">
                        Next <i class="fas fa-chevron-right"></i>
                    </button>
                    <button class="btn primary hidden" id="submitBtn" onclick="submitQuiz()">
                        <i class="fas fa-check-circle"></i> Submit Quiz
                    </button>
                </div>
            </section>

            <!-- Results Section -->
            <section id="resultsSection" class="results-section">
                <div class="results-header">
                    <h2><i class="fas fa-trophy"></i> Quiz Results</h2>
                    <p>Congratulations! You've completed the quiz.</p>
                </div>

                <div class="score-circle">
                    <div class="score-ring" id="scoreRing">
                        <div class="score-inner">
                            <div class="score-text" id="scoreText">0%</div>
                            <div class="score-label">Score</div>
                        </div>
                    </div>
                </div>

                <div class="results-summary">
                    <div class="summary-card glass-card">
                        <div class="summary-icon" style="color: var(--success-color);">
                            <i class="fas fa-check-circle"></i>
                        </div>
                        <div class="summary-value" id="correctCount">0</div>
                        <div class="summary-label">Correct Answers</div>
                    </div>
                    <div class="summary-card glass-card">
                        <div class="summary-icon" style="color: var(--error-color);">
                            <i class="fas fa-times-circle"></i>
                        </div>
                        <div class="summary-value" id="incorrectCount">0</div>
                        <div class="summary-label">Incorrect Answers</div>
                    </div>
                    <div class="summary-card glass-card">
                        <div class="summary-icon" style="color: var(--warning-color);">
                            <i class="fas fa-clock"></i>
                        </div>
                        <div class="summary-value" id="totalTime">00:00</div>
                        <div class="summary-label">Total Time</div>
                    </div>
                </div>

                <div class="review-section">
                    <h3>Review Your Answers</h3>
                    <div id="reviewContainer">
                        <!-- Review items will be inserted here -->
                    </div>
                </div>

                <div style="margin-top: 2rem; text-align: center;">
                    <button class="btn primary" onclick="restartQuiz()">
                        <i class="fas fa-redo"></i> Take Another Quiz
                    </button>
                </div>
            </section>
        </main>
    </div>

    <div class="toast" id="toast">
        <span id="toastMessage"></span>
    </div>

    <script>
        let questions = [];
        let currentQuestionIndex = 0;
        let userAnswers = [];
        let flaggedQuestions = [];
        let startTime;
        let timerInterval;

        // File upload handling
        const uploadArea = document.querySelector('.upload-area');
        const fileInput = document.getElementById('fileInput');

        uploadArea.addEventListener('dragover', (e) => {
            e.preventDefault();
            uploadArea.classList.add('dragover');
        });

        uploadArea.addEventListener('dragleave', () => {
            uploadArea.classList.remove('dragover');
        });

        uploadArea.addEventListener('drop', (e) => {
            e.preventDefault();
            uploadArea.classList.remove('dragover');
            const files = e.dataTransfer.files;
            if (files.length > 0) {
                fileInput.files = files;
                handleFileUpload(files[0]);
            }
        });

        fileInput.addEventListener('change', (e) => {
            if (e.target.files.length > 0) {
                handleFileUpload(e.target.files[0]);
            }
        });

        function handleFileUpload(file) {
            const reader = new FileReader();
            reader.onload = (e) => {
                const content = e.target.result;
                parseMCQs(content);
            };
            reader.readAsText(file);
            showToast('File uploaded successfully!');
        }

        function parseMCQs(content) {
            const lines = content.trim().split('\n');
            questions = [];
            
            lines.forEach((line, index) => {
                const parts = line.trim().split('|');
                if (parts.length === 6) {
                    questions.push({
                        id: index + 1,
                        question: parts[0],
                        options: [parts[1], parts[2], parts[3], parts[4]],
                        correct: parts[5].toUpperCase(),
                        userAnswer: null
                    });
                }
            });
            
            showToast(`Parsed ${questions.length} questions successfully!`);
        }

        function parseQuestions() {
            if (questions.length === 0) {
                showToast('Please upload a file with questions first!', 'error');
                return;
            }
            
            document.getElementById('uploadSection').style.display = 'none';
            document.getElementById('quizSection').style.display = 'block';
            
            startQuiz();
        }

        function startQuiz() {
            currentQuestionIndex = 0;
            userAnswers = new Array(questions.length).fill(null);
            flaggedQuestions = [];
            startTime = Date.now();
            
            timerInterval = setInterval(updateTimer, 1000);
            
            displayQuestion();
            updateProgress();
        }

        function displayQuestion() {
            const question = questions[currentQuestionIndex];
            const container = document.getElementById('questionContainer');
            
            container.innerHTML = `
                <div class="question-card glass-card">
                    <div class="question-number">Question ${currentQuestionIndex + 1}</div>
                    <div class="question-text">${question.question}</div>
                    <div class="options-container">
                        ${question.options.map((option, index) => `
                            <label class="option ${userAnswers[currentQuestionIndex] === String.fromCharCode(65 + index) ? 'selected' : ''}">
                                <input type="radio" name="answer" value="${String.fromCharCode(65 + index)}">
                                <div class="option-label">${String.fromCharCode(65 + index)}</div>
                                <div>${option}</div>
                            </label>
                        `).join('')}
                    </div>
                </div>
            `;
            
            // Add event listeners to options
            document.querySelectorAll('.option').forEach(option => {
                option.addEventListener('click', function() {
                    const input = this.querySelector('input[type="radio"]');
                    input.checked = true;
                    userAnswers[currentQuestionIndex] = input.value;
                    updateOptionStyles();
                });
            });
            
            updateNavigationButtons();
        }

        function updateOptionStyles() {
            document.querySelectorAll('.option').forEach(option => {
                const input = option.querySelector('input[type="radio"]');
                if (input.checked) {
                    option.classList.add('selected');
                } else {
                    option.classList.remove('selected');
                }
            });
        }

        function updateNavigationButtons() {
            const prevBtn = document.getElementById('prevBtn');
            const nextBtn = document.getElementById('nextBtn');
            const submitBtn = document.getElementById('submitBtn');
            
            prevBtn.disabled = currentQuestionIndex === 0;
            
            if (currentQuestionIndex === questions.length - 1) {
                nextBtn.classList.add('hidden');
                submitBtn.classList.remove('hidden');
            } else {
                nextBtn.classList.remove('hidden');
                submitBtn.classList.add('hidden');
            }
            
            // Update flag button
            const flagBtn = document.getElementById('flagBtn');
            if (flaggedQuestions.includes(currentQuestionIndex)) {
                flagBtn.innerHTML = '<i class="fas fa-flag"></i> Unflag';
            } else {
                flagBtn.innerHTML = '<i class="fas fa-flag"></i> Flag';
            }
        }

        function nextQuestion() {
            if (currentQuestionIndex < questions.length - 1) {
                currentQuestionIndex++;
                displayQuestion();
                updateProgress();
            }
        }

        function previousQuestion() {
            if (currentQuestionIndex > 0) {
                currentQuestionIndex--;
                displayQuestion();
                updateProgress();
            }
        }

        function flagQuestion() {
            const index = flaggedQuestions.indexOf(currentQuestionIndex);
            if (index > -1) {
                flaggedQuestions.splice(index, 1);
            } else {
                flaggedQuestions.push(currentQuestionIndex);
            }
            updateNavigationButtons();
        }

        function updateProgress() {
            const progress = ((currentQuestionIndex + 1) / questions.length) * 100;
            document.getElementById('progressFill').style.width = `${progress}%`;
            document.getElementById('questionCounter').textContent = 
                `Question ${currentQuestionIndex + 1} of ${questions.length}`;
        }

        function updateTimer() {
            const elapsed = Date.now() - startTime;
            const minutes = Math.floor(elapsed / 60000);
            const seconds = Math.floor((elapsed % 60000) / 1000);
            document.getElementById('timeElapsed').textContent = 
                `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
        }

        function submitQuiz() {
            clearInterval(timerInterval);
            
            // Calculate results
            let correct = 0;
            let incorrect = 0;
            
            questions.forEach((q, index) => {
                q.userAnswer = userAnswers[index];
                if (q.userAnswer === q.correct) {
                    correct++;
                } else if (q.userAnswer) {
                    incorrect++;
                }
            });
            
            displayResults(correct, incorrect);
        }

        function displayResults(correct, incorrect) {
            document.getElementById('quizSection').style.display = 'none';
            document.getElementById('resultsSection').style.display = 'block';
            
            const score = Math.round((correct / questions.length) * 100);
            const totalTime = document.getElementById('timeElapsed').textContent;
            
            // Update score display
            document.getElementById('scoreText').textContent = `${score}%`;
            document.getElementById('scoreRing').style.setProperty('--score-deg', `${(score / 100) * 360}deg`);
            
            // Update summary
            document.getElementById('correctCount').textContent = correct;
            document.getElementById('incorrectCount').textContent = incorrect;
            document.getElementById('totalTime').textContent = totalTime;
            
            // Generate review
            const reviewContainer = document.getElementById('reviewContainer');
            reviewContainer.innerHTML = '';
            
            questions.forEach((q, index) => {
                const isCorrect = q.userAnswer === q.correct;
                const reviewItem = document.createElement('div');
                reviewItem.className = 'review-item glass-card';
                reviewItem.innerHTML = `
                    <div class="review-question">Q${index + 1}: ${q.question}</div>
                    <div class="review-answer">
                        Your answer: <span class="${isCorrect ? 'review-correct' : 'review-incorrect'}">${q.userAnswer || 'Not answered'}</span>
                        ${!isCorrect ? `<br>Correct answer: <span class="review-correct">${q.correct}</span>` : ''}
                    </div>
                `;
                reviewContainer.appendChild(reviewItem);
            });
        }

        function restartQuiz() {
            document.getElementById('resultsSection').style.display = 'none';
            document.getElementById('uploadSection').style.display = 'block';
            questions = [];
            userAnswers = [];
            flaggedQuestions = [];
            document.getElementById('fileInput').value = '';
        }

        function showToast(message, type = 'success') {
            const toast = document.getElementById('toast');
            const toastMessage = document.getElementById('toastMessage');
            
            toastMessage.textContent = message;
            toast.style.background = type === 'error' ? 
                'rgba(239, 68, 68, 0.9)' : 
                'rgba(16, 185, 129, 0.9)';
            
            toast.classList.add('show');
            
            setTimeout(() => {
                toast.classList.remove('show');
            }, 3000);
        }

        // Demo functionality - load sample questions if no file uploaded
        window.addEventListener('load', () => {
            // Sample questions for demo
            const sampleQuestions = [
                "What is the capital of France?|London|Paris|Berlin|Madrid|B",
                "Which planet is known as the Red Planet?|Venus|Mars|Jupiter|Saturn|B",
                "What is 2 + 2?|3|4|5|6|B",
                "Who painted the Mona Lisa?|Van Gogh|Picasso|Da Vinci|Michelangelo|C"
            ];
            
            sampleQuestions.forEach((line, index) => {
                const parts = line.split('|');
                questions.push({
                    id: index + 1,
                    question: parts[0],
                    options: [parts[1], parts[2], parts[3], parts[4]],
                    correct: parts[5],
                    userAnswer: null
                });
            });
        });
    </script>
</body>
</html>
